#!/bin/bash

# The aim of this script is to be able to run it once to set up a mac
# and again at any time to update

# Bail out if the user is not on a mac
if [ $(uname) != "Darwin" ]; then
  echo "This script only works for mac, exiting"
  exit 1
fi

# TODO
# - List apps requiring update and provide option to update or not

# Make this script behave more like a proper language
# set -e will cause the script to bail after a command fails
# but it ignores failures inside pipelines so...
# set -o pipefail will do the same within a pipeline
# set -u will bail out if there are unset variables
# set -x will print out each command before running it
# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -euo pipefail

source ./lib/functions.sh

# Check for either Xcode command line tools, or command line tools without xcode
if [[ ($(xcode-select -p) == '/Applications/Xcode.app/Contents/Developer') || ($(xcode-select -p) == '/Library/Developer/CommandLineTools') ]]; then
  if pkgutil --pkg-info com.apple.pkg.CLTools_Executables >/dev/null 2>&1; then
    echo "Command line tools already installed, taking no action"
  else
    if ask "Would you like to install command line tools?" Y; then
      echo "Installing command line tools"
      xcode-select --install
    fi
  fi
else
  echo "Xcode not installed, aborting command line tools install" >&2
  exit 1
fi 

if ask "Would you like to install nvm?" Y; then
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
fi

source ./lib/brew.sh
source ./lib/zsh.sh
source ./lib/apps.sh
source ./lib/ssh.sh
source ./lib/nvim.sh
source ./lib/theme.sh