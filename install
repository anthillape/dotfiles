#!/bin/bash

# The aim of this script is to be able to run it once to set up a mac
# and again at any time to update

# Bail out if the user is not on a mac
if [ $(uname) != "Darwin" ]; then
  echo "This script only works for mac, exiting"
  exit 1
fi

# TODO
# - List apps requiring update and provide option to update or not

# Make this script behave more like a proper language
# set -e will cause the script to bail after a command fails
# but it ignores failures inside pipelines so...
# set -o pipefail will do the same within a pipeline
# set -u will bail out if there are unset variables
# set -x will print out each command before running it
# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -euo pipefail

# Load functions
source ./functions.sh

if [ ! -d /Library/Developer/CommandLineTools ]; then
  if ask "Would you like to install xcode command line tools (required)?" Y; then
    xcode-select --install
  else
    echo "Command line tools are required, you may run them separately with 'xcode-select --install"
    exit 1
  fi
fi


# You will need to make sure there is a Frameworks directory
# This this brew may fail

if [ ! -d "/usr/local/Frameworks" ]; then
  echo "Creating missing /usr/local/Frameworks directory"
  sudo mkdir /usr/local/Frameworks
  sudo chown $(logname) /usr/local/Frameworks
fi

# Test to see if homebrew is installed, if not install it
if [ ! $(which brew) ]; then
  echo "Installing Homebrew"
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" > /tmp/homebrew-install.log
else
  echo "Homebrew already installed, skipping installation"
fi

cat <<END_OF_HEREDOC

Next up we are going to install all the apps.
For command line apps we will use brew.
For gui apps that are not on the app store we use brew cask.
For app store apps we will use mas-cli.

Note that for mas-cli to work you will need to be signed in
to the app store, if you attempt to sign in with mas-cli
from the command line it will likely fail, and you will have
to sign in manually to the app store after a system hard boot.

After signing in you should go to
System Preferences -> App Store -> Password Settings,
and change "Purchases and In-app Purchases" to "Require After 15 minutes"
and "Free Downloads" to "Save Password".

END_OF_HEREDOC

loginToAppStore

if ask "Would you like to update and upgrade apps first?" Y; then
  echo "Updating and installing brew/cask/mas apps"
  # Update recipies
  brew update

  # Update installed formulae
  brew upgrade
fi
if ask "Would you like to check/update brew/cask/mas dependencies?" Y; then
  echo -e "\nChecking brew dependencies..."
  # Checking brew apps are up to date with Brewfile list,
  # "> /dev/null 2>&1" suppresses STDOUT and STDERR so they
  # are not printed out to the user
  if brew bundle check --file=brewfiles/Brewfile > /dev/null 2>&1; then
    echo "Brew dependencies up to date"
  else
    echo "Brew dependencies missing" 
    if ask "Would you like to install cli apps with brew?" Y; then
      brew bundle --file=brewfiles/Brewfile
    fi
  fi

  echo -e "\nChecking cask dependencies..."
  if brew bundle check --file=brewfiles/Caskfile > /dev/null 2>&1; then
    echo "Cask dependencies up to date"
  else
    echo "Cask dependencies missing" 
    if ask "Would you like to install gui apps with cask?" Y; then
      # using "|| true", because an app may already be installed and we shouldn't stop the script
      brew bundle --file=brewfiles/Caskfile || true
    fi
  fi

  echo -e "\nChecking mas-cli dependencies..."
  if brew bundle check --file=brewfiles/Masfile > /dev/null 2>&1; then
    echo "Mas dependencies up to date"
  else
    echo "Mas dependencies missing" 
    if ask "Would you like to install app store apps with mas-cli? (remember to sign in to the app store first)" Y; then
      # using "|| true", because an app may already be installed and we shouldn't stop the script
      brew bundle --file=brewfiles/Masfile || true
    fi
  fi
fi

if ask "Would you like to cleanup unused brew / cask / mas apps?" Y; then
  # Clean up brew, the '-s' option clears the cache, including latest versions
  brew cleanup -s

  # Clean up brew cask
  brew cask cleanup
fi

# Add zsh to list of valid login shells at /etc/shells 
# tee is used so we can write to a file that is owned by root
# since using sudo at the beginning would only sudo echo
# (using sudo -s in this case failed on my setup)
# Then use chsh -s to change users shell to zsh
if ! grep -Fxq /usr/local/bin/zsh /etc/shells; then
  echo "Adding homebrew zsh (usr/local/bin/zsh) to /etc/shells"
  echo /usr/local/bin/zsh | sudo tee -a /etc/shells > /dev/null
  echo "Changing default shell to zsh"
  chsh -s /usr/local/bin/zsh
else
  echo "Shell already set to zsh, taking no action"
fi

# Symlink pure.zsh and async.zsh in $fpath so pure theme has access
if [ ! -f /usr/local/opt/zplug/repos/sindresorhus/pure/async.zsh ]; then
  echo "Symlinking async.zsh for pure theme"
  ln -s /usr/local/opt/zplug/repos/sindresorhus/pure/async.zsh /usr/local/share/zsh/site-functions/async
else
  echo "async.zsh already symlinked, taking no action"
fi

if [ ! -f /usr/local/opt/zplug/repos/sindresorhus/pure/pure.zsh ]; then
  echo "Symlinking pure.zsh"
  ln -s /usr/local/opt/zplug/repos/sindresorhus/pure/pure.zsh /usr/local/share/zsh/site-functions/prompt_pure_setup
else
  echo "pure.zsh already symlinked, taking no action"
fi

# Create database directory for mongo
MONGO_DB_DIR=/data/db
if [ ! -d $MONGO_DB_DIR ]; then 
  echo "Creating mongo database and setting permissions"
  sudo mkdir -p $MONGO_DB_DIR
  sudo chown `whoami`:admin $MONGO_DB_DIR
  sudo chmod u+xw $MONGO_DB_DIR 
else
  echo "Mongo database already exists, taking no action"
fi

KARABINER_JSON=~/.config/karabiner/karabiner.json
if [[ -L $KARABINER_JSON && "$(readlink $KARABINER_JSON)" = "$PWD/karabiner.json" ]]; then
  echo "karabiner already symlinked, taking no action"
else
  if ask "Would you like to symlink karabiner config?" Y; then
    if [ -f $KARABINER_JSON ]; then
      echo 'backing up karabiner.json'
      mv $KARABINER_JSON $KARABINER_JSON.bak
    else
      mkdir -p ~/.config/karabiner
    fi
    echo 'symlinking karabiner.json'
    ln -sf $PWD/karabiner.json $KARABINER_JSON
    echo 'restarting karabiner daemon'
    launchctl stop org.pqrs.karabiner.karabiner_console_user_server
    launchctl start org.pqrs.karabiner.karabiner_console_user_server
  fi
fi

SLATE=~/.slate
if [[ -L $SLATE && "$(readlink $SLATE)" = "$PWD/slate" ]]; then
  echo "slate already symlinked, taking no action"
else
  if ask "Would you like to symlink slate config?" Y; then
    if [ -f $SLATE ]; then
      echo "Backing up .slate"
      mv $SLATE $SLATE.bak
    fi
    echo "Symlinking .slate"
    ln -sf $PWD/slate $SLATE
  fi
fi

SSH=~/.ssh/config
if [[ -L $SSH && "$(readlink $SSH)" = "$PWD/ssh/config" ]]; then
  echo "ssh already symlinked, taking no action"
else
  if ask "Would you like to symlink ssh config?" Y; then
    if [ -f $SSH ]; then
      echo "Backing up .ssh/config"
      mv $SSH $SSH.bak
    fi
    echo "Symlinking .ssh/config"
    ln -sf $PWD/ssh/config $SSH
  fi
fi

ZSH_DIR=~/.zsh
ZSHRC=~/.zshrc
ZSHENV=~/.zshenv
if [[ -L $ZSHRC && "$(readlink $ZSHRC)" = "$PWD/zsh/zshrc" && -L $ZSHENV && -L $ZSH_DIR ]]; then
  echo "zsh already symlinked, taking no action"
else
  if ask "Would you like to symlink zsh?" Y; then
    if [ -d $ZSH_DIR ]; then
      echo "Backing up .zsh directory"
      if [ -d $ZSH_DIR.bak ]; then
        rm -rf $ZSH_DIR.bak
      fi
      mv $ZSH_DIR $ZSH_DIR.bak
    fi
    if [ -f $ZSHRC ]; then
      echo "Backing up .zshrc"
      mv $ZSHRC $ZSHRC.bak
    fi
    if [ -f $ZSHENV ]; then
      echo "Backing up .zshenv"
      mv $ZSHENV $ZSHENV.bak
    fi

    echo "Symlinking .zsh directory"
    ln -snf $PWD/zsh $ZSH_DIR

    echo "Symlinking .zshrc"
    ln -sf $PWD/zsh/zshrc $ZSHRC

    echo "Symlinking .zshenv"
    ln -sf $PWD/zsh/zshenv $ZSHENV

    # zsh cannot be reloaded here as this is a bash script

    echo "You will need to restart / reload your shell for zsh to update"
  fi
fi

TMUX=~/.tmux.conf
if [[ -L $TMUX && "$(readlink $TMUX)" = "$PWD/tmux/tmux.conf" ]]; then
  echo "tmux already symlinked, taking no action"
else
  if ask "Would you like to symlink tmux config?" Y; then

    if [ -f $TMUX ]; then
      echo "Backing up .tmux.conf"
      mv $TMUX $TMUX.bak
    fi
    echo "Symlinking .tmux.conf"
    ln -sf $PWD/tmux/tmux.conf $TMUX
  fi
fi

NVIM=~/.config/nvim/init.vim
if [[ -L $NVIM && "$(readlink $NVIM)" = "$PWD/nvim/init.vim" ]]; then
  echo "nvim already symlinked, taking no action"
else
  if ask "Would you like to symlink nvim config?" Y; then

    if [ -f $NVIM ]; then
      echo "Backing up init.vim"
      mv $NVIM $NVIM.bak
    else
      mkdir -p ~/.config/nvim
    fi
    echo "Symlinking init.vim"
    ln -sf $PWD/nvim/init.vim $NVIM
  fi
fi

PLUG=~/.local/share/nvim/site/autoload/plug.vim
if [[ -f $PLUG ]]; then
  echo "Vim plug already installed, taking no action"
else
  if ask "Would you like to install vim plug" Y; then
    curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    # Install plugins
    command nvim +PlugInstall +qall
  fi
fi

if [[ $(xcode-select -p) == '/Applications/Xcode.app/Contents/Developer' ]]; then
  if pkgutil --pkg-info com.apple.pkg.CLTools_Executables >/dev/null 2>&1; then
    echo "Command line tools already installed, taking no action"
  else
    if ask "Would you like to install command line tools?" Y; then
      echo "Installing command line tools"
      xcode-select --install
    fi
  fi
else
  echo "Xcode not installed, aborting command line tools install" >&2
  exit 1
fi 

RUBY_VERSION=2.5.0
# We need ruby to support neovim plugins that use ruby, this requires
#Â the ruby neovim provider to be setup and the neovim ruby gem
# to be installed.

# Check that desired version of ruby is installed
if [[ ! $(rbenv versions | grep $RUBY_VERSION) ]]; then
  if ask "Would you like to install ruby version $RUBY_VERSION?" Y; then
    # --verbose because this can take a while and without it
    # there would be no feeback that anything is happening
    echo "Installing ruby version $RUBY_VERSION"
    rbenv install $RUBY_VERSION --verbose
  fi
else
  echo "Ruby version $RUBY_VERSION already installed, taking no action"
fi

# Check that global ruby version is set correctly
if [[ ! ($(rbenv global) = $RUBY_VERSION) ]]; then
  if ask "Would you like to set global ruby version to $RUBY_VERSION?" Y; then
    echo "Setting global ruby version in ~/.rbenv/version"
    rbenv global $RUBY_VERSION
    rbenv rehash
  fi
else
  echo "Ruby version already set to $RUBY_VERSION, taking no action"
fi

# Check that the ruby neovim library is available
if [[ ! $(gem which neovim) ]]; then
  if ask "Would you like to install the ruby neovim module?" Y; then
    gem install neovim
  fi
else
  echo "Ruby neovim module already installed, taking no action"
fi

NODE_VERSION=9.6.1
# Load nvm into this shell
# The nvm.sh script contains unbound variables so we use `set +u`
# to disable checks for these that would cause the script to
# bail out.
set +u
source ~/.nvm/nvm.sh
# Check that correct node version is installed
if [[ ! $(nvm version v$NODE_VERSION) = v$NODE_VERSION ]]; then
  if ask "Would you like to install node $NODE_VERSION?" Y; then
    echo "Installing node version $NODE_VERSION"
    nvm install $NODE_VERSION
  fi
else
  echo "Node version $NODE_VERSION already installed, taking no action" 
fi

# Make sure the shell is using the correct version of node
if [[ ! $(nvm current) = v$NODE_VERSION ]]; then
  if ask "Would you like to switch to node $NODE_VERSION?" Y; then
    echo "Using node version $NODE_VERSION"
    nvm use $NODE_VERSION
  fi
else
  echo "Node version $NODE_VERSION already in use, taking no action" 
fi

# Switch unbound variable checks back on as we are done with nvm
set -u

if [[ ! $(yarn global list | grep neovim) ]]; then
  if ask "Would you like to install the node neovim module?" Y; then
    yarn global add neovim
  fi
else
  echo "Node neovim module already installed, taking no action"
fi

# Install python2 for neovim plugins
PYTHON2_VERSION=2.7.11

# Check that desired version of python2 is installed
if [[ ! $(pyenv versions | grep $PYTHON2_VERSION) ]]; then
  if ask "Would you like to install python version $PYTHON2_VERSION?" Y; then
    # --verbose because this can take a while and without it
    # there would be no feeback that anything is happening
    echo "Installing python version $PYTHON2_VERSION"
    pyenv install $PYTHON2_VERSION --verbose
  fi
else
  echo "Python version $PYTHON2_VERSION already installed, taking no action"
fi

# Create virtualenv for python2 
PYTHON2_VIRTUALENV=neovim2
if [[ ! $(pyenv virtualenvs | grep $PYTHON2_VIRTUALENV) ]]; then
  if ask "Would you like to install python2 virtualenv?" Y; then
    pyenv virtualenv $PYTHON2_VERSION $PYTHON2_VIRTUALENV
  fi
else
  echo "$PYTHON2_VIRTUALENV already exists, taking no action"
fi

# Install python2 neovim module
# Enter the neovim2 virtualenv
set +u
source ~/.pyenv/versions/$PYTHON2_VIRTUALENV/bin/activate 
set -u
if [[ ! $(pip show neovim) ]]; then
  if ask "Would you like to install neovim module for python2?" Y; then
    echo "Installing neovim to $PYTHON2_VIRTUALENV virtualenv"
    pip install neovim
  fi
else
  echo "neovim already installed to $PYTHON2_VIRTUALENV, taking no action"
fi

# Deactivate python env
set +u
source deactivate > /dev/null 2>&1
set -u

# Install python3 for neovim plugins
PYTHON3_VERSION=3.5.2

# Check that desired version of python3 is installed
if [[ ! $(pyenv versions | grep $PYTHON3_VERSION) ]]; then
  if ask "Would you like to install python version $PYTHON3_VERSION?" Y; then
    # --verbose because this can take a while and without it
    # there would be no feeback that anything is happening
    echo "Installing python version $PYTHON3_VERSION"
    pyenv install $PYTHON3_VERSION --verbose
  fi
else
  echo "Python version $PYTHON3_VERSION already installed, taking no action"
fi

# Create virtualenv for python3 
PYTHON3_VIRTUALENV=neovim3
if [[ ! $(pyenv virtualenvs | grep $PYTHON3_VIRTUALENV) ]]; then
  if ask "Would you like to install python3 virtualenv?" Y; then
    pyenv virtualenv $PYTHON3_VERSION $PYTHON3_VIRTUALENV
  fi
else
  echo "$PYTHON3_VIRTUALENV already exists, taking no action"
fi

# Install python3 neovim module
# Enter the neovim3 virtualenv
set +u
source ~/.pyenv/versions/$PYTHON3_VIRTUALENV/bin/activate 
set -u
if [[ ! $(pip show neovim) ]]; then
  if ask "Would you like to install neovim module for python3?" Y; then
    echo "Installing neovim to $PYTHON3_VIRTUALENV virtualenv"
    pip install neovim
  fi
else
  echo "neovim already installed to $PYTHON3_VIRTUALENV, taking no action"
fi

# Deactivate python env
set +u
source deactivate > /dev/null 2>&1
set -u

echo "Some changes may require a restart to take effect"
